{"version":3,"sources":["List.js","TodoList.js","Task.js","TaskList.js","App.js","index.js"],"names":["List","list","toggleList","renameList","applyRenameList","cancelRenameList","getListRenameDefaultValue","renameNameRef","useRef","handleChangeBtnClick","name","current","value","id","classes","rename","className","toggleRenameContainerClass","onKeyDown","e","keyCode","ref","defaultValue","type","onClick","selected","toggleListSelectedClass","toggleRenameBtnClass","TodoList","lists","map","Task","task","toggleTask","renameTask","applyRenameTask","cancelRenameTask","getTaskRenameDefaultValue","console","log","toggleTaskContainerClass","checked","complete","onChange","toggleTaskCompletedClass","TaskList","tasks","undefined","LOCAL_STORAGE_LIST_KEY","LOCAL_STORAGE_SELECTED_LIST_ID_KEY","App","useState","setLists","selectedListId","setSelectedListId","listNameRef","taskNameRef","newLists","selectedList","find","useEffect","storedLists","JSON","parse","localStorage","getItem","storedSelectedListId","setItem","stringify","getWidth","window","innerWidth","document","documentElement","clientWidth","body","useCurrentWidth","width","setWidth","timeoutId","resizeListener","clearTimeout","setTimeout","addEventListener","removeEventListener","handleAddList","closeRenameListContainers","uuidv4","prevLists","handleDeleteLists","remainingLists","filter","handleAddTask","closeRenameTaskContainers","push","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","renderTodaysDate","length","toggleTodoListWindowClass","placeholder","onSubmit","toggleTodoDeleteBtn","count","renderListsCount","toggleTaskWindowClass","toggleTaskDeleteBtn","newTasks","renderTasksCount","selectedTask","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d3bcd3b5.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\r\n\r\nfunction List({\r\n  list,\r\n  toggleList,\r\n  renameList,\r\n  applyRenameList,\r\n  cancelRenameList,\r\n  getListRenameDefaultValue,\r\n}) {\r\n  const renameNameRef = useRef();\r\n\r\n  function listKeyPress(e) {\r\n    if (e.keyCode === 13) {\r\n      handleChangeBtnClick();\r\n    }\r\n  }\r\n\r\n  // OnClick Handler Functions\r\n  function handleListClick() {\r\n    toggleList(list.id);\r\n  }\r\n\r\n  function handleRenameBtnClick() {\r\n    renameList(list.id);\r\n  }\r\n\r\n  function handleChangeBtnClick() {\r\n    const name = renameNameRef.current.value;\r\n    applyRenameList(list.id, name);\r\n  }\r\n\r\n  function handleCancelBtnClick() {\r\n    cancelRenameList(list.id);\r\n  }\r\n\r\n  // Class toggle function\r\n  function toggleRenameContainerClass() {\r\n    let classes = \"rename-container \";\r\n    if (!list.rename) return (classes += \"hide\");\r\n    return classes;\r\n  }\r\n\r\n  let classes = \"\";\r\n  if (list.rename) return (classes += \"hide\");\r\n  function toggleListContainerClass() {\r\n    return classes;\r\n  }\r\n\r\n  function toggleRenameBtnClass() {\r\n    let classes = \"small-btn btn-primary \";\r\n    if (list.rename) return (classes += \"hide\");\r\n    return classes;\r\n  }\r\n\r\n  function toggleListSelectedClass() {\r\n    let classes = \"list-name \";\r\n    if (list.selected && !list.rename) return (classes += \"list-selected\");\r\n    else if (!list.selected && list.rename) return (classes += \"hide\");\r\n    return classes;\r\n  }\r\n\r\n  function handleRenameDefaultValue() {\r\n    return getListRenameDefaultValue(list.id);\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"list\">\r\n        <span className={toggleRenameContainerClass()}>\r\n          <input\r\n            className=\"list-rename-input\"\r\n            onKeyDown={listKeyPress}\r\n            ref={renameNameRef}\r\n            defaultValue={handleRenameDefaultValue()}\r\n            type=\"text\"\r\n          />\r\n          <span className=\"rename-btns\">\r\n            <button\r\n              className=\"small-btn btn-success\"\r\n              onClick={handleChangeBtnClick}\r\n            >\r\n              Change\r\n            </button>\r\n            <button\r\n              className=\"small-btn btn-danger\"\r\n              onClick={handleCancelBtnClick}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </span>\r\n        </span>\r\n        <label className={toggleListContainerClass()}>\r\n          <span onClick={handleListClick} className={toggleListSelectedClass()}>\r\n            {list.name}\r\n          </span>\r\n        </label>\r\n      </div>\r\n      <button className={toggleRenameBtnClass()} onClick={handleRenameBtnClick}>\r\n        Rename\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from \"react\";\r\nimport List from \"./List\";\r\n\r\nfunction TodoList({\r\n  lists,\r\n  toggleList,\r\n  renameList,\r\n  applyRenameList,\r\n  cancelRenameList,\r\n  getListRenameDefaultValue,\r\n}) {\r\n  return lists.map((list) => {\r\n    return (\r\n      <List\r\n        key={list.id}\r\n        toggleList={toggleList}\r\n        renameList={renameList}\r\n        getListRenameDefaultValue={getListRenameDefaultValue}\r\n        applyRenameList={applyRenameList}\r\n        cancelRenameList={cancelRenameList}\r\n        list={list}\r\n      />\r\n    );\r\n  });\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useRef } from \"react\";\r\n\r\nfunction Task({\r\n  task,\r\n  toggleTask,\r\n  renameTask,\r\n  applyRenameTask,\r\n  cancelRenameTask,\r\n  getTaskRenameDefaultValue,\r\n}) {\r\n  const renameNameRef = useRef();\r\n\r\n  function listKeyPress(e) {\r\n    if (e.keyCode === 13) {\r\n      handleChangeBtnClick();\r\n    }\r\n  }\r\n\r\n  function handleTaskClick() {\r\n    toggleTask(task.id);\r\n  }\r\n\r\n  function handleRenameBtnClick() {\r\n    renameTask(task.id);\r\n  }\r\n\r\n  function handleChangeBtnClick() {\r\n    const name = renameNameRef.current.value;\r\n    applyRenameTask(task.id, name);\r\n  }\r\n\r\n  function handleCancelBtnClick() {\r\n    cancelRenameTask(task.id);\r\n  }\r\n\r\n  // Class toggle function\r\n  function toggleRenameContainerClass() {\r\n    let classes = \"rename-container \";\r\n    if (!task.rename) return (classes += \"hide\");\r\n    return classes;\r\n  }\r\n\r\n  function toggleTaskContainerClass() {\r\n    let classes = \"task-label \";\r\n    if (task.rename) return (classes += \"hide\");\r\n    return classes;\r\n  }\r\n\r\n  function toggleRenameBtnClass() {\r\n    let classes = \"small-btn btn-primary \";\r\n    if (task.rename) return (classes += \"hide\");\r\n    return classes;\r\n  }\r\n\r\n  function toggleTaskCompletedClass() {\r\n    let classes = \"task-name \";\r\n    if (task.complete) return (classes += \"task-completed\");\r\n    return classes;\r\n  }\r\n\r\n  function handleRenameDefaultValue() {\r\n    console.log(getTaskRenameDefaultValue(task.id));\r\n\r\n    return getTaskRenameDefaultValue(task.id);\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"task\">\r\n        <span className={toggleRenameContainerClass()}>\r\n          <input\r\n            className=\"task-rename-input\"\r\n            onKeyDown={listKeyPress}\r\n            ref={renameNameRef}\r\n            defaultValue={handleRenameDefaultValue()}\r\n            type=\"text\"\r\n          />\r\n          <span className=\"rename-btns\">\r\n            <button\r\n              className=\"small-btn btn-success\"\r\n              onClick={handleChangeBtnClick}\r\n            >\r\n              Change\r\n            </button>\r\n            <button\r\n              className=\"small-btn btn-danger\"\r\n              onClick={handleCancelBtnClick}\r\n            >\r\n              Cancel\r\n            </button>\r\n          </span>\r\n        </span>\r\n        <label className={toggleTaskContainerClass()}>\r\n          <input\r\n            className=\"task-checkbox\"\r\n            type=\"checkbox\"\r\n            checked={task.complete}\r\n            onChange={handleTaskClick}\r\n          />\r\n          <span className={toggleTaskCompletedClass()}>{task.name}</span>\r\n        </label>\r\n      </div>\r\n      <button className={toggleRenameBtnClass()} onClick={handleRenameBtnClick}>\r\n        Rename\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nfunction TaskList({\r\n  tasks,\r\n  toggleTask,\r\n  renameTask,\r\n  applyRenameTask,\r\n  cancelRenameTask,\r\n  getTaskRenameDefaultValue,\r\n}) {\r\n  if (tasks === undefined || tasks === null) return null;\r\n  return tasks.map((task) => {\r\n    return (\r\n      <Task\r\n        key={task.id}\r\n        toggleTask={toggleTask}\r\n        renameTask={renameTask}\r\n        getTaskRenameDefaultValue={getTaskRenameDefaultValue}\r\n        applyRenameTask={applyRenameTask}\r\n        cancelRenameTask={cancelRenameTask}\r\n        task={task}\r\n      />\r\n    );\r\n  });\r\n}\r\n\r\nexport default TaskList;\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport Navbar from \"./Navbar\";\nimport Footer from \"./Footer\";\nimport TodoList from \"./TodoList\";\nimport TaskList from \"./TaskList\";\nimport uuidv4 from \"uuid/dist/v4\";\n\nconst LOCAL_STORAGE_LIST_KEY = \"todoApp.list\";\nconst LOCAL_STORAGE_SELECTED_LIST_ID_KEY = \"todoApp.selectedListId\";\n\nfunction App() {\n  const [lists, setLists] = useState([]);\n  const [selectedListId, setSelectedListId] = useState();\n  const listNameRef = useRef();\n  const taskNameRef = useRef();\n\n  const newLists = [...lists];\n  const selectedList = newLists.find((list) => list.id === selectedListId);\n\n  // loads all todo and task data upon opening app\n  useEffect(() => {\n    const storedLists = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_LIST_KEY)\n    );\n    const storedSelectedListId = localStorage.getItem(\n      LOCAL_STORAGE_SELECTED_LIST_ID_KEY\n    );\n    if (storedLists) setLists(storedLists);\n    if (storedSelectedListId) setSelectedListId(storedSelectedListId);\n  }, []);\n\n  // saves all todo data upon setting todos or tasks\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_LIST_KEY, JSON.stringify(lists));\n  }, [lists]);\n\n  // saves all todo data upon setting todos or tasks\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_SELECTED_LIST_ID_KEY, selectedListId);\n  }, [selectedListId]);\n\n  //-------------------- WINDOW WIDTH DEPENDENT FUNCTIONS --------------------//\n\n  const getWidth = () =>\n    window.innerWidth ||\n    document.documentElement.clientWidth ||\n    document.body.clientWidth;\n\n  function useCurrentWidth() {\n    // save current window width in the state object\n    let [width, setWidth] = useState(getWidth());\n\n    // in this case useEffect will execute only once because\n    // it does not have any dependencies.\n    useEffect(() => {\n      // timeoutId for debounce mechanism\n      let timeoutId = null;\n      const resizeListener = () => {\n        // prevent execution of previous setTimeout\n        clearTimeout(timeoutId);\n        // change width from the state object after 150 milliseconds\n        timeoutId = setTimeout(() => setWidth(getWidth()), 150);\n      };\n      // set resize listener\n      window.addEventListener(\"resize\", resizeListener);\n\n      // clean up function\n      return () => {\n        // remove resize listener\n        window.removeEventListener(\"resize\", resizeListener);\n      };\n    }, []);\n\n    return width;\n  }\n\n  // Class Toggle Functions\n  function toggleTodoDeleteBtn(useCurrentWidth) {\n    let classes = \"btn btn-danger \";\n    if (useCurrentWidth <= 1300) {\n      return (classes += \"hide\");\n    } else return classes;\n  }\n\n  function toggleTaskDeleteBtn(useCurrentWidth) {\n    let classes = \"btn btn-danger \";\n    if (useCurrentWidth <= 1300) {\n      return classes;\n    } else return (classes += \"hide\");\n  }\n\n  //-------------------- LIST FUNCTIONS --------------------//\n  // OnKeyDown Function\n  function listKeyPress(e) {\n    if (e.keyCode === 13) {\n      handleAddList(e);\n    }\n  }\n\n  function getListRenameDefaultValue(id) {\n    const newLists = [...lists];\n\n    const selectedList = newLists.find((list) => list.id === id);\n\n    return selectedList.name;\n  }\n\n  // Initializes a list item\n  function handleAddList(e) {\n    const name = listNameRef.current.value;\n\n    closeRenameListContainers(newLists);\n\n    if (name === \"\") return;\n\n    const id = uuidv4();\n    setSelectedListId(id);\n    setLists((prevLists) => {\n      return [\n        ...prevLists,\n        { id: id, name: name, selected: false, tasks: [], rename: false },\n      ];\n    });\n    listNameRef.current.value = null;\n  }\n\n  // Toggles list property of selected\n  function toggleList(id) {\n    const selectedList = lists.find((list) => list.id === id);\n    const newLists = [...lists];\n\n    // otherList creation is important to ensure selected\n    // list works without reseting its selected property\n    selectedList.selected = !selectedList.selected;\n    closeRenameListContainers(newLists);\n    closeRenameTaskContainers(selectedList);\n    const otherLists = newLists.filter((list) => list.id !== id);\n\n    otherLists.map((list) => {\n      return (list.selected = false);\n    });\n    setLists(newLists);\n    setSelectedListId(id);\n  }\n\n  // Gets all lists and sets their selected property to false\n  function closeAllLists(e) {\n    const newLists = [...lists];\n\n    closeRenameListContainers(newLists);\n    // close all tasks for each list\n    newLists.map((list) => {\n      return list.tasks.map((task) => (task.rename = false));\n    });\n\n    newLists.map((list) => {\n      return (list.selected = false);\n    });\n\n    setLists(newLists);\n    setSelectedListId(null);\n  }\n\n  // Toggles shifting animation classes\n  function toggleTodoListWindowClass() {\n    let classes = \"todo-lists-container \";\n    const count = lists.filter((list) => list.selected).length;\n    if (count <= 0) return classes;\n    return (classes += \"shift-todo-lists\");\n  }\n\n  // Deletes selected list\n  function handleDeleteLists() {\n    const newLists = [...lists];\n\n    closeRenameListContainers(newLists);\n    const remainingLists = lists.filter((list) => !list.selected);\n    setLists(remainingLists);\n    setSelectedListId(null);\n  }\n\n  function renderListsCount() {\n    const count = lists.filter((list) => !list.complete).length;\n\n    if (count <= 0) return \"no active todo lists!\";\n    else if (count === 1) return `${count} active todo list`;\n    else return `${count} active todo lists`;\n  }\n\n  // Sets list property of rename to true\n  function renameList(id) {\n    const newLists = [...lists];\n\n    const selectedList = lists.find((list) => list.id === id);\n    closeRenameListContainers(newLists);\n    closeRenameTaskContainers(selectedList);\n    selectedList.rename = true;\n\n    setLists(newLists);\n    setSelectedListId(id);\n  }\n\n  // Sets list property of name to inputted value\n  function applyRenameList(id, name) {\n    const newLists = [...lists];\n\n    const selectedList = newLists.find((list) => list.id === id);\n    selectedList.rename = false;\n\n    if (name === \"\") return;\n    selectedList.name = name;\n\n    setLists(newLists);\n    setSelectedListId(id);\n  }\n\n  // Sets list property of rename to false\n  function cancelRenameList(id) {\n    const newLists = [...lists];\n\n    const selectedList = lists.find((list) => list.id === id);\n    selectedList.rename = false;\n\n    setLists(newLists);\n    setSelectedListId(id);\n  }\n\n  function closeRenameListContainers(lists) {\n    lists.map((list) => (list.rename = false));\n  }\n\n  //-------------------- TASK FUNCTIONS --------------------//\n\n  function getTaskRenameDefaultValue(id) {\n    const newLists = [...lists];\n\n    const selectedList = newLists.find((list) => list.id === selectedListId);\n    const selectedTask = selectedList.tasks.find((task) => task.id === id);\n\n    console.log(selectedTask.name);\n    return selectedTask.name;\n  }\n\n  //OnKeyDown Function\n  function taskKeyPress(e) {\n    if (e.keyCode === 13) {\n      handleAddTask(e);\n    }\n  }\n\n  // Initializes a task item\n  function handleAddTask(e) {\n    const newLists = [...lists];\n\n    const name = taskNameRef.current.value;\n    if (name === \"\") return;\n    const selectedList = newLists.find((list) => list.id === selectedListId);\n    closeRenameListContainers(newLists);\n    closeRenameTaskContainers(selectedList);\n    selectedList.tasks.push({\n      id: uuidv4(),\n      name: name,\n      complete: false,\n      rename: false,\n    });\n    taskNameRef.current.value = null;\n\n    setLists(newLists);\n  }\n\n  // toggles task property of complete\n  function toggleTask(id) {\n    const newLists = [...lists];\n\n    const selectedList = newLists.find((list) => list.id === selectedListId);\n    closeRenameListContainers(newLists);\n    closeRenameTaskContainers(selectedList);\n\n    const selectedTask = selectedList.tasks.find((task) => task.id === id);\n    selectedTask.complete = !selectedTask.complete;\n\n    setLists(newLists);\n  }\n\n  // Toggles shifting animation classes\n  function toggleTaskWindowClass() {\n    let classes = \"task-list-container \";\n    const count = lists.filter((list) => list.selected).length;\n    if (count <= 0) return (classes += \"shift-tasks\");\n    return classes;\n  }\n\n  // Clears all completed tasks\n  function handleClearTasks() {\n    const newLists = [...lists];\n\n    const selectedList = lists.find((list) => list.id === selectedListId);\n    closeRenameListContainers(newLists);\n    closeRenameTaskContainers(selectedList);\n\n    const newTasks = selectedList.tasks.filter((task) => !task.complete);\n    selectedList.tasks = newTasks;\n\n    setLists(newLists);\n  }\n\n  function renderTasksCount() {\n    if (selectedListId === null || selectedListId === undefined) return;\n    const selectedList = lists.find((list) => list.id === selectedListId);\n    if (selectedList === null || selectedList === undefined) return;\n    const count = selectedList.tasks.filter((task) => !task.complete).length;\n\n    if (count <= 0) return \"no task left to complete!\";\n    else if (count === 1) return `${count} task left to complete`;\n    else return `${count} tasks left to complete`;\n  }\n\n  // Sets task property of rename to true\n  function renameTask(id) {\n    const newLists = [...lists];\n\n    // close all other rename inputs\n    const selectedList = newLists.find((list) => list.id === selectedListId);\n    const selectedTask = selectedList.tasks.find((task) => task.id === id);\n\n    closeRenameListContainers(newLists);\n    closeRenameTaskContainers(selectedList);\n    selectedTask.rename = true;\n\n    setLists(newLists);\n  }\n\n  // Sets task property of name to inputted value\n  function applyRenameTask(id, name) {\n    const newLists = [...lists];\n\n    const selectedList = newLists.find((list) => list.id === selectedListId);\n    const selectedTask = selectedList.tasks.find((task) => task.id === id);\n\n    selectedTask.rename = false;\n\n    if (name === \"\") return;\n    selectedTask.name = name;\n\n    setLists(newLists);\n  }\n\n  // Sets task property of rename to false\n  function cancelRenameTask(id) {\n    const newLists = [...lists];\n\n    const selectedList = newLists.find((list) => list.id === selectedListId);\n    const selectedTask = selectedList.tasks.find((task) => task.id === id);\n\n    selectedTask.rename = false;\n\n    console.log(\n      `cancelRenameList function ran and the selected list rename is ${selectedTask.rename}`\n    );\n\n    setLists(newLists);\n  }\n\n  // Close Rename Container\n  function closeRenameTaskContainers(selectedList) {\n    selectedList.tasks.map((task) => (task.rename = false));\n  }\n\n  function renderTodaysDate() {\n    let today = new Date();\n\n    let dd = today.getDate();\n    let mm = today.getMonth();\n    let yyyy = today.getFullYear();\n\n    let months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n\n    let date = `${months[mm]}. ${dd}, ${yyyy}`;\n\n    return date;\n  }\n\n  return (\n    <div className=\"app\">\n      <main>\n        <div className=\"date-container\">\n          <h5 className=\"date\">{renderTodaysDate()}</h5>\n        </div>\n        <div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n          <div className=\"page-line\"></div>\n        </div>\n        <section className={toggleTodoListWindowClass()}>\n          <h4 className=\"lists-header\">Todo Lists</h4>\n          <input\n            className=\"input-box\"\n            ref={listNameRef}\n            type=\"text\"\n            placeholder=\"Enter a todo list...\"\n            onKeyDown={listKeyPress}\n          />\n          <button\n            className=\"btn btn-success\"\n            onClick={handleAddList}\n            onSubmit={handleAddList}\n          >\n            Add\n          </button>\n          <button\n            className={toggleTodoDeleteBtn(useCurrentWidth())}\n            onClick={handleDeleteLists}\n          >\n            Delete List\n          </button>\n          <div className=\"count\">{renderListsCount()}</div>\n          <div className=\"todo-lists\">\n            <TodoList\n              lists={lists}\n              toggleList={toggleList}\n              renameList={renameList}\n              applyRenameList={applyRenameList}\n              cancelRenameList={cancelRenameList}\n              getListRenameDefaultValue={getListRenameDefaultValue}\n            />\n          </div>\n        </section>\n\n        <section className={toggleTaskWindowClass()}>\n          <div className=\"btn-container\">\n            <button className=\"btn btn-primary\" onClick={closeAllLists}>\n              Lists\n            </button>\n            <button\n              className={toggleTaskDeleteBtn(useCurrentWidth())}\n              onClick={handleDeleteLists}\n            >\n              Delete List\n            </button>\n          </div>\n          <h4 className=\"tasks-header\">Tasks</h4>\n          <input\n            className=\"input-box\"\n            ref={taskNameRef}\n            type=\"text\"\n            placeholder=\"Enter a task...\"\n            onKeyDown={taskKeyPress}\n          />\n          <button\n            className=\"btn btn-success\"\n            onClick={handleAddTask}\n            onSubmit={handleAddTask}\n          >\n            Add\n          </button>\n          <button className=\"btn btn-danger\" onClick={handleClearTasks}>\n            Clear Complete\n          </button>\n          <div className=\"count\">{renderTasksCount()}</div>\n          <div className=\"task-list\">\n            <TaskList\n              tasks={selectedList ? selectedList.tasks : null}\n              toggleTask={toggleTask}\n              renameTask={renameTask}\n              applyRenameTask={applyRenameTask}\n              cancelRenameTask={cancelRenameTask}\n              getTaskRenameDefaultValue={getTaskRenameDefaultValue}\n            />\n          </div>\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}